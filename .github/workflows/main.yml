# 워크플로우 이름 정의
name: Python package

# 워크플로우 실행 조건 설정
on:
  push:
    branches: [ "main" ]  # main 브랜치에 push 될 때 실행
    # 태그가 생성될 때도 워크플로우 실행
    tags:
      - 'v*'  # v로 시작하는 모든 태그 (예: v1.0.0)
    paths-ignore:  # 다음 파일/폴더 변경 시 실행하지 않음
      - '**.md'  # 모든 마크다운 파일
      - '.gitignore'  # git 무시 파일
      - 'LICENSE'  # 라이선스 파일
      - 'README.md'  # README 파일
      - 'docs/**'  # docs 폴더 내 모든 파일
      - 'img/**'  # img 폴더 내 모든 파일
      - '**.png'  # 모든 PNG 파일
      - '**.jpg'  # 모든 JPG 파일
      - '**.jpeg'  # 모든 JPEG 파일
      - '**.gif'  # 모든 GIF 파일
  pull_request:
    branches: [ "main" ]  # main 브랜치로의 PR에서 실행
    paths-ignore:  # push와 동일한 제외 규칙 적용
      - '**.md'
      - '.gitignore'
      - 'LICENSE'
      - 'README.md'
      - 'docs/**'
      - 'img/**'
      - '**.png'
      - '**.jpg'
      - '**.jpeg'
      - '**.gif'

# 작업 정의
jobs:
  build:
    runs-on: ubuntu-22.04  # Ubuntu 22.04 LTS 환경에서 실행
    
    # 동시 실행 제어
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}  # 워크플로우 그룹 정의
      cancel-in-progress: true  # 진행 중인 워크플로우 취소
      
    # Python 버전 전략 설정
    strategy:
      matrix:
        python-version: ["3.9.12"]  # Python 3.9.12 버전 사용

    # 실행 단계 정의
    steps:
    # 코드 체크아웃
    - uses: actions/checkout@v2
    
    # Python 설정
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
        
    # 의존성 설치
    - name: Install dependencies
      run: |
        sudo apt-get update
        # GUI 관련 패키지 설치
        sudo apt-get install -y xvfb libxcb-xinerama0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xfixes0 libxcb-xkb1 libxkbcommon-x11-0 libxcb-shape0 libxcb-shm0 libx11-xcb1
        python -m pip install --upgrade pip
        pip install pandas numpy PyQt5
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    # 파일 구조 확인
    - name: Check file structure
      run: |
        pwd
        ls -la
        
    # Python 스크립트 실행
    - name: Run Python
      env:
        CI: true  # CI 환경 변수 설정
      run: |
        export QT_DEBUG_PLUGINS=1  # Qt 디버그 활성화
        export DISPLAY=:99  # 가상 디스플레이 설정
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &  # 가상 디스플레이 서버 실행
        sleep 3  # 서버 시작 대기
        if [ ! -f txt2qrcode.py ]; then echo "Error: txt2qrcode.py not found!" && exit 1; fi  # 파일 존재 여부 확인
        timeout 10s python3 txt2qrcode.py  # 10초 후 자동 종료

  # 릴리스 자동화를 위한 새로운 job
  release:
    needs: build
    runs-on: ubuntu-latest
    # main 브랜치 푸시에서도 실행되도록 조건 수정
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0  # 전체 히스토리 가져오기
    
    # 버전 태그를 자동으로 생성하는 단계
    - name: Create version tag
      if: github.ref == 'refs/heads/main'  # main 브랜치에 push될 때만 실행
      id: create_tag  # 다음 단계에서 이 단계의 출력을 참조하기 위한 ID
      run: |
        # 가장 최근 태그를 가져옴. 태그가 없으면 v1.0.0을 시작점으로 사용
        latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
        
        # 버전 번호를 major.minor.patch로 분리
        # sed 's/v//'는 버전 문자열에서 'v' 접두사를 제거
        # cut -d. -f1,2,3은 점(.)을 구분자로 사용하여 각 버전 번호를 추출
        major=$(echo $latest_tag | sed 's/v//' | cut -d. -f1)
        minor=$(echo $latest_tag | sed 's/v//' | cut -d. -f2)
        patch=$(echo $latest_tag | sed 's/v//' | cut -d. -f3)
        
        # patch 버전을 1 증가
        new_patch=$((patch + 1))
        # 새로운 태그 생성 (v1.0.1 형식)
        new_tag="v${major}.${minor}.${new_patch}"
        
        # 디버깅을 위해 새 태그 정보 출력
        echo "Creating new tag: $new_tag"
        # 다음 단계에서 사용할 수 있도록 태그 값을 GitHub Actions 출력 변수로 저장
        echo "new_tag=${new_tag}" >> $GITHUB_OUTPUT
        
        # Git 사용자 정보 설정
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # 새 태그 생성 및 원격 저장소에 푸시
        git tag -a $new_tag -m "Release $new_tag"
        git push origin $new_tag

    # Python 설정
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: "3.9.12"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller PyQt5
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    # spec 파일 생성 및 수정
    - name: Create and modify spec file
      run: |
        # spec 파일 생성
        pyinstaller -w -F txt2qrcode.py
        
        # spec 파일 수정
        cat > txt2qrcode.spec << EOL
        # -*- mode: python ; coding: utf-8 -*-

        block_cipher = None
        
        # UI 파일 추가
        added_files = [
            ('txt2qrcode.ui', '.')
        ]

        a = Analysis(
            ['txt2qrcode.py'],
            pathex=[],
            binaries=[],
            datas=added_files,  # UI 파일 포함
            hiddenimports=[],
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[],
            excludes=[],
            win_no_prefer_redirects=False,
            win_private_assemblies=False,
            cipher=block_cipher,
            noarchive=False,
        )
        
        pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

        exe = EXE(
            pyz,
            a.scripts,
            a.binaries,
            a.zipfiles,
            a.datas,
            [],
            name='TEXT2QRCODE',
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=True,
            upx_exclude=[],
            runtime_tmpdir=None,
            console=False,
            disable_windowed_traceback=False,
            target_arch=None,
            codesign_identity=None,
            entitlements_file=None,
        )
        EOL
    
    # 실행 파일 생성
    - name: Create Executable
      run: |
        pyinstaller txt2qrcode.spec
    
    # GitHub 릴리스를 생성하는 단계
    - name: Create Release
      if: steps.create_tag.outputs.new_tag != ''  # 태그가 성공적으로 생성된 경우에만 실행
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.create_tag.outputs.new_tag }}  # 이전 단계에서 생성한 태그 사용
        files: |  # 릴리스에 포함할 파일들
          dist/TEXT2QRCODE*
        name: Release ${{ steps.create_tag.outputs.new_tag }}  # 릴리스 제목
        draft: false  # 초안 모드로 생성하지 않음
        prerelease: false  # 정식 릴리스로 표시
        generate_release_notes: true  # 자동으로 릴리스 노트 생성
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # GitHub API 접근을 위한 토큰

